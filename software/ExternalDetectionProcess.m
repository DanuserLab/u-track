classdef ExternalDetectionProcess < DetectionProcess
    % A concrete class for importing detection results (saved in a .mat file) generated by 3rd party
    % software
    %
    %
    % This class is modified from ExternalSegmentationProcess.m, but
    % specified for detection process.
    %
    % Qiongjing (Jenny) Zou, Feb 2019
%
% Copyright (C) 2019, Danuser Lab - UTSouthwestern 
%
% This file is part of u-track.
% 
% u-track is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% u-track is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with u-track.  If not, see <http://www.gnu.org/licenses/>.
% 
% 
    
    methods(Access = public)
        
        function obj = ExternalDetectionProcess(owner, varargin)
            % Input check
            ip = inputParser;
            ip.addRequired('owner',@(x) isa(x,'MovieData'));
            ip.addOptional('outputDir',owner.outputDirectory_,@ischar);
            ip.addOptional('funParams',[],@isstruct);
            ip.parse(owner,varargin{:});
            
            super_args{1} = owner;
            super_args{2} = ExternalDetectionProcess.getName();
            super_args{3} = @importExternalDetection;
            if isempty(ip.Results.funParams)
                super_args{4} = ExternalDetectionProcess.getDefaultParams(...
                    owner, ip.Results.outputDir);
            else
                super_args{4} = ip.Results.funParams;
            end
            
            obj = obj@DetectionProcess(super_args{:});
        end

        function sanityCheck(obj)
            sanityCheck@DetectionProcess(obj)

            p = obj.getParameters();
            % Test valid channel index matches input data
            validChannels = find(~cellfun(@isempty, p.InputData));
            assert(isequal(validChannels(:), p.ChannelIndex(:)), 'lccb:set:fatal', ...
                'Selected channels do not match input data\n');

            for i = p.ChannelIndex
                if ~exist(p.InputData{i}, 'dir')
                    error('lccb:set:fatal', ...
                        ['The specified detection directory:\n\n ',p.InputData{i}, ...
                        '\n\ndoes not exist. Please double check your channel path.'])
                end

                if isempty(p.InputData{i})
                    error('lccb:set:fatal', ...
                        ['No proper detection files are detected in:\n\n ',p.InputData{i}, ...
                        '\n\nPlease double check your channel path.'])
                end
            end
        end
    end
    methods (Static)
        
        function name = getName()
            name = 'External Detection';
        end
        
        function h = GUI()
            h= @externalDetectionProcessGUI;
        end

        function funParams = getDefaultParams(owner,varargin)
            % Input check
            ip=inputParser;
            ip.addRequired('owner',@(x) isa(x,'MovieData'));
            ip.addOptional('outputDir',owner.outputDirectory_,@ischar);
            ip.parse(owner, varargin{:})
            outputDir=ip.Results.outputDir;
            
            % Set default parameters
            funParams.OutputDirectory = [outputDir  filesep 'externalDetection'];
            funParams.ChannelIndex = 1:numel(owner.channels_);
            funParams.InputData = cell(numel(owner.channels_), 1);
        end
    end
end
